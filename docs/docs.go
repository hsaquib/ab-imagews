// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "termsOfService": "tbd",
        "contact": {
            "name": "Hasibus Saquib",
            "email": "saquib.hasibus@anonderbazar.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/private/admin/image/upload": {
            "post": {
                "description": "Upload an image with three variants: Original, Medium(500X500) \u0026 ThumbNail(100X100)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Image"
                ],
                "summary": "upload image",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set access token here",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "file is mandatory",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.ImageVariantUploadSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body, or missing required fields.",
                        "schema": {
                            "$ref": "#/definitions/response.EmptyErrorRes"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access attempt.",
                        "schema": {
                            "$ref": "#/definitions/response.EmptyErrorRes"
                        }
                    },
                    "500": {
                        "description": "API sever or db unreachable.",
                        "schema": {
                            "$ref": "#/definitions/response.EmptyErrorRes"
                        }
                    }
                }
            }
        },
        "/api/v1/private/merchant/image/upload": {
            "post": {
                "description": "Upload an image with three variants: Original, Medium(500X500) \u0026 ThumbNail(100X100)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Image"
                ],
                "summary": "upload image",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set access token here",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Some fields are mandatory",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.ImageVariantUploadSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body, or missing required fields.",
                        "schema": {
                            "$ref": "#/definitions/response.EmptyErrorRes"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access attempt.",
                        "schema": {
                            "$ref": "#/definitions/response.EmptyErrorRes"
                        }
                    },
                    "500": {
                        "description": "API sever or db unreachable.",
                        "schema": {
                            "$ref": "#/definitions/response.EmptyErrorRes"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "response.EmptyErrorRes": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/response.EmptyObject"
                },
                "message": {
                    "type": "string",
                    "example": "failure message"
                },
                "status": {
                    "type": "string",
                    "example": "Status string corresponding to the error"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                },
                "timestamp": {
                    "type": "string",
                    "example": "2006-01-02T15:04:05.000Z"
                }
            }
        },
        "response.EmptyObject": {
            "type": "object"
        },
        "response.ImageVariantUploadSuccessResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/response.UploadedImages"
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "response.UploadedImages": {
            "type": "object",
            "properties": {
                "filename": {
                    "type": "string",
                    "example": "xyz.jpg"
                },
                "medium": {
                    "type": "string",
                    "example": "https://..../m/..jpg"
                },
                "original": {
                    "type": "string",
                    "example": "https://....jpg"
                },
                "thumbnail": {
                    "type": "string",
                    "example": "https://..../s/..jpg"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "localhost:8080",
	BasePath:    "/",
	Schemes:     []string{},
	Title:       "auth",
	Description: "This is auth REST api server",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
